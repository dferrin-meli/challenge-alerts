// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// FuryConfiguration is an autogenerated mock type for the FuryConfiguration type
type FuryConfiguration struct {
	mock.Mock
}

// GetBool provides a mock function with given fields: _a0, _a1
func (_m *FuryConfiguration) GetBool(_a0 string, _a1 bool) bool {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, bool) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetDuration provides a mock function with given fields: _a0, _a1
func (_m *FuryConfiguration) GetDuration(_a0 string, _a1 time.Duration) time.Duration {
	ret := _m.Called(_a0, _a1)

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(string, time.Duration) time.Duration); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// GetFloat64 provides a mock function with given fields: _a0, _a1
func (_m *FuryConfiguration) GetFloat64(_a0 string, _a1 float64) float64 {
	ret := _m.Called(_a0, _a1)

	var r0 float64
	if rf, ok := ret.Get(0).(func(string, float64) float64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// GetInt provides a mock function with given fields: _a0, _a1
func (_m *FuryConfiguration) GetInt(_a0 string, _a1 int) int {
	ret := _m.Called(_a0, _a1)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, int) int); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetString provides a mock function with given fields: _a0, _a1
func (_m *FuryConfiguration) GetString(_a0 string, _a1 string) string {
	ret := _m.Called(_a0, _a1)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetUint provides a mock function with given fields: _a0, _a1
func (_m *FuryConfiguration) GetUint(_a0 string, _a1 uint) uint {
	ret := _m.Called(_a0, _a1)

	var r0 uint
	if rf, ok := ret.Get(0).(func(string, uint) uint); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

type mockConstructorTestingTNewFuryConfiguration interface {
	mock.TestingT
	Cleanup(func())
}

// NewFuryConfiguration creates a new instance of FuryConfiguration. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFuryConfiguration(t mockConstructorTestingTNewFuryConfiguration) *FuryConfiguration {
	mock := &FuryConfiguration{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
